First step is to scan the machine:

nmap -vvvv -sC -sV -p- -T4 MACHINE_IP

This reveals a few open ports, several of which are very common. Namely, 21 (ftp), 22 (ssh) and 80 (http).

Notably, the FTP server allows anonymous login. Connecting to it, we find two files, password-policy.md and ufw.status.
Switching to passive mode (command: passive), we can then use get to download both files.
We learn from the password policy that the password must be between 11 and 13 characters and all lowercase.
We also learn from ufw.status that a number of ports are open that nmap didn't detect:

To                         Action      From
--                         ------      ----
20/tcp                     ALLOW       Anywhere                  
21/tcp                     ALLOW       Anywhere                  
22/tcp                     ALLOW       Anywhere                  
80/tcp                     ALLOW       Anywhere                  
501/tcp                    ALLOW       Anywhere                  
8080/tcp                   ALLOW       Anywhere                  
8000/tcp                   ALLOW       Anywhere                  
1603/tcp                   ALLOW       Anywhere                  
1564/tcp                   ALLOW       Anywhere                  
50000:50999/tcp            ALLOW       Anywhere                  

Port 8080 in particular is a login page. Score.

Ports 1564 and 1603 don't appear to be actually open, so for now I'll treat them as simply being a nod to Hamlet (Shakespeare was born in 1564 and Hamlet debuted in 1603).

I'm not sure what ports 50000 thru 50999 are for, but I'm sure gonna find out later.

A directory enumeration of port 80 in Gobuster reveals robots.txt, which contains Flag 1.

On the homepage of port 80, we can find an alternative name for Michael: ghost.
The homepage states Michael is obsessed with Hamlet, so we can guess that his password will probably be something from the version of Hamlet this org is using.
So, we can create a wordlist using that info and the password policy.

Using cewl, a nifty wordlist generator that ships with Kali Linux, we can generate a wordlist of every unique word in Hamlet that is at least 11 characters long, and make them all lowercase:

cewl -m 11 -w hamletwordlist.txt --lowercase http://MACHINE_IP/hamlet.txt

Using this we can head over to the login page on port 8080 and try a Hydra attack:

hydra -l ghost -P hamletwordlist.txt http-post-form://MACHINE_IP -s 8080 "/login.html:username=^USER^&password=^PASS^:Login failed"

The password, then, is vnsanctified. This gets us into the login portal on port 8080.

It does not however get us into SSH. When we run

ssh ghost@MACHINE_IP

we get Permission denied (publickey).
(The creator of the room, Ingo Kleiber, confirmed to me that the SSH port being open is a red herring.)

Moving ahead with the login portal, the ghost user has access to three tools on this site: Annotation, Projects, and Users.
Looking through them, Annotation doesn't appear to have anything immediately useful, but if we open Hamlet in the Projects tab we find a reference to something called "OpheliasNotes". Curious. There doesn't appear to be a way to open it, so we'll come back to it later.
In Users, we find something really interesting. The ghost user can change the password for the other two users: admin and ophelia.
We can now login as any user we want.

Logging in as ophelia, we find she only has access to one tool: Annotation. But we find something different in it than what was in ghost's Annotation tab: a reference to a password (quite a strong one at that, if it weren't stored here in plaintext).

Unfortunately we get the same result trying to ssh into the system as admin and ophelia, but if we head back to the FTP server and try to login as ophelia, the password from the annotation gets us in.
Logged in to the FTP server as ophelia (and switching once again to PASV), we find a flag, specifically Flag 3. 

If we cd out of the ophelia directory we can find two files, gravediggers.py and gravediggers.service. Flag 2 is hidden in the code for gravediggers.py.

Trying to FTP in as ghost and admin gets us nowhere, so we'll chalk that up to a red herring for now. Let's take a look at some of these other ports.

Port 501 is marked open--unusual--and the service is listed as Nagios NSCA. Unfortunately searchsploit doesn't return anything related to NSCA and trying to connect to the port in browser gets us nothing.

Going back to port 8000 we find that it simply returns the contents of hamlet.txt, but looking at the page source we can see that it pulls this from somewhere. Maybe somehwere that we can upload files to?
Heading back to WebAnno, we can upload a reverse shell in the Projects tab under Documents. I used a standard PHP reverse shell.
From there, it's a simple matter of the following:

nc -lvnp [listening port configured in your reverse shell]
Change the URL on port 8000 to end in /document/1/source/[filename of your reverse shell]

And now you've popped a reverse shell as www-data. (I wasn't able to stabilize this shell since python isn't installed on the target machine, but it doesn't turn out to be necessary.)
Now you're in the / directory, and the find command works. Why not run find / -type f -name *flag* 2>/dev/null?

Well, because that will also return a bunch of stuff that isn't relevant. But it will also show you that there's a file, /stage/flag, that contains Flag 4.

The next logical step would be to poke around in /root, but as might be expected we don't have permission to cd into root. Time to poke around for privesc vectors.

I checked around for SUID binaries, etc, but it turns out we can read /etc/shadow in addition to /etc/passwd. Well, now. Let's take the root line from both these files over to our attacking machine, where our friend John will make some magic with them:

echo [root line from /etc/passwd] > passwd.txt
echo [root line from /etc/shadow] > shadow.txt
unshadow passwd.txt shadow.txt > unshadowed.txt
john --format=crypt unshadowed.txt

The hash type took me a while to figure out what to do with it, but adding the format tag will make it work.
After all this, we find that root's password is murder. Delightfully thematic.
Pop back over to the reverse shell and su into root with your newfound knowledge.
Now we can cd into root, but in order to see anything we need to add an -la to our ls, which reveals .flag containing Flag 5. Ever closer!

